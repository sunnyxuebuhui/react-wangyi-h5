{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _defineProperty from 'babel-runtime/helpers/defineProperty';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React from 'react';\nexport default function PopupMixin(getModal, platformProps) {\n  return _a = function (_React$Component) {\n    _inherits(_a, _React$Component);\n\n    function _a(props) {\n      _classCallCheck(this, _a);\n\n      var _this = _possibleConstructorReturn(this, (_a.__proto__ || Object.getPrototypeOf(_a)).call(this, props));\n\n      _this.onPickerChange = function (pickerValue) {\n        if (_this.state.pickerValue !== pickerValue) {\n          _this.setState({\n            pickerValue: pickerValue\n          });\n\n          var _this$props = _this.props,\n              picker = _this$props.picker,\n              pickerValueChangeProp = _this$props.pickerValueChangeProp;\n\n          if (picker && picker.props[pickerValueChangeProp]) {\n            picker.props[pickerValueChangeProp](pickerValue);\n          }\n        }\n      };\n\n      _this.saveRef = function (picker) {\n        _this.picker = picker;\n      };\n\n      _this.onTriggerClick = function (e) {\n        var child = _this.props.children;\n        var childProps = child.props || {};\n\n        if (childProps[_this.props.triggerType]) {\n          childProps[_this.props.triggerType](e);\n        }\n\n        _this.fireVisibleChange(!_this.state.visible);\n      };\n\n      _this.onOk = function () {\n        _this.props.onOk(_this.picker && _this.picker.getValue());\n\n        _this.fireVisibleChange(false);\n      };\n\n      _this.getContent = function () {\n        if (_this.props.picker) {\n          var _React$cloneElement;\n\n          var pickerValue = _this.state.pickerValue;\n\n          if (pickerValue === null) {\n            pickerValue = _this.props.value;\n          }\n\n          return React.cloneElement(_this.props.picker, (_React$cloneElement = {}, _defineProperty(_React$cloneElement, _this.props.pickerValueProp, pickerValue), _defineProperty(_React$cloneElement, _this.props.pickerValueChangeProp, _this.onPickerChange), _defineProperty(_React$cloneElement, 'ref', _this.saveRef), _React$cloneElement));\n        } else {\n          return _this.props.content;\n        }\n      };\n\n      _this.onDismiss = function () {\n        _this.props.onDismiss();\n\n        _this.fireVisibleChange(false);\n      };\n\n      _this.hide = function () {\n        _this.fireVisibleChange(false);\n      };\n\n      _this.state = {\n        pickerValue: 'value' in _this.props ? _this.props.value : null,\n        visible: _this.props.visible || false\n      };\n      return _this;\n    }\n\n    _createClass(_a, [{\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        if ('value' in nextProps) {\n          this.setState({\n            pickerValue: nextProps.value\n          });\n        }\n\n        if ('visible' in nextProps) {\n          this.setVisibleState(nextProps.visible);\n        }\n      }\n    }, {\n      key: 'setVisibleState',\n      value: function setVisibleState(visible) {\n        this.setState({\n          visible: visible\n        });\n\n        if (!visible) {\n          this.setState({\n            pickerValue: null\n          });\n        }\n      }\n    }, {\n      key: 'fireVisibleChange',\n      value: function fireVisibleChange(visible) {\n        if (this.state.visible !== visible) {\n          if (!('visible' in this.props)) {\n            this.setVisibleState(visible);\n          }\n\n          this.props.onVisibleChange(visible);\n        }\n      }\n    }, {\n      key: 'getRender',\n      value: function getRender() {\n        var props = this.props;\n        var children = props.children;\n\n        if (!children) {\n          return getModal(props, this.state.visible, {\n            getContent: this.getContent,\n            onOk: this.onOk,\n            hide: this.hide,\n            onDismiss: this.onDismiss\n          });\n        }\n\n        var _props = this.props,\n            WrapComponent = _props.WrapComponent,\n            disabled = _props.disabled;\n        var child = children;\n        var newChildProps = {};\n\n        if (!disabled) {\n          newChildProps[props.triggerType] = this.onTriggerClick;\n        }\n\n        return React.createElement(WrapComponent, {\n          style: props.wrapStyle\n        }, React.cloneElement(child, newChildProps), getModal(props, this.state.visible, {\n          getContent: this.getContent,\n          onOk: this.onOk,\n          hide: this.hide,\n          onDismiss: this.onDismiss\n        }));\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        return this.getRender();\n      }\n    }]);\n\n    return _a;\n  }(React.Component), _a.defaultProps = _extends({\n    onVisibleChange: function onVisibleChange(_) {},\n    okText: 'Ok',\n    dismissText: 'Dismiss',\n    title: '',\n    onOk: function onOk(_) {},\n    onDismiss: function onDismiss() {}\n  }, platformProps), _a;\n\n  var _a;\n}","map":null,"metadata":{},"sourceType":"module"}